#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.

require_relative "../../tools/se_open_data/lib/load_path"
require "se_open_data"
require "csv"

# Defines a schema mapping for ica-youth-network data.
#
# The hash {IcaYouthNetworkConverter::InputHeaders} identifies methods
# which should be implemented as simple CSV field look-ups.
#
# Some are named in {SeOpenData::CSV::Standard::V1}'s keys and so will be copied
# verbatim into the output CSV data. These have no underscore prefix.
#
# Those with underscore prefixes are used internally.
#
# The other keys of {SeOpenData::CSV::Standard::V1} must also have methods
# implemented in this class. These are the ones which have more
# complicated transformation rules - they cannot be a simple copy of
# an existing data field.
#
# Input data fields are:
#
# - Organization Type
# - Name
# - name
# - Region
# - Country
# - City
# - Latitude
# - Longitude
# - Size
# - Type
# - Sector
# - Address
# - Description
# - Additional Details
# - Website
# - Email
#
# See discussion here:
# https://github.com/SolidarityEconomyAssociation/open-data/issues/11
class IcaYouthNetworkConverter < SeOpenData::CSV::RowReader

  # @param row [Hash<String => String>] - a row of CSV data
  def initialize(row)
    # Let CSV::RowReader provide methods for accessing columns described by InputHeaders, above:
    super(row, InputHeaders)
  end

  def street_address
    # "#{_street_addres} #{_sup_street_address_1} #{_sup_street_address_2}"
    main = _street_address ? _street_address : ""
    sec = _sup_street_address_1 ? _sup_street_address_1 : ""
    thrd = _sup_street_address_2 ? _sup_street_address_2 : ""
    res = "#{main} #{sec} #{thrd}"
    res.strip
  end

  def homepage
    if _website && !_website.empty?
      http_regex = /https?\S+/
      m = http_regex.match(_website)
      if m
        m[0]
      else
        www_regex = /^www\./
        www_m = www_regex.match(_website)
        if www_m
          "http://#{_website}"
        else
          add_comment("This doesn't look like a website: #{_website} (Maybe it's missing the http:// ?)")
          nil
        end
      end
    end
  end

  def name
    _name || "No Name" # FIXME
  end

  def legal_forms
    # Return a list of strings, separated by SeOpenData::CSV::Standard::V1::SubFieldSeparator.
    # Each item in the list is a prefLabel taken from essglobal/standard/legal-form.skos.
    # See lib/se_open_data/essglobal/legal_form.rb
    "Cooperative"
  end

  def organisational_structure
    ## Return a list of strings, separated by SeOpenData::CSV::Standard::V1::SubFieldSeparator.
    ## Each item in the list is a prefLabel taken from essglobal/standard/legal-form.skos.
    ## See lib/se_open_data/essglobal/legal_form.rb
    # _struct_type _typology
    # org_st = TYPE_TO_ORG_STRUCT[type]? TYPE_TO_ORG_STRUCT[type] : "Co-operative"
    org_st_temp = TYPE_TO_ORG_STRUCT[_struct_type] ? TYPE_TO_ORG_STRUCT[_struct_type] : "Co-operative"

    if org_st_temp.is_a?(Hash)
      org_st = org_st_temp[_typology] ? org_st_temp[_typology] : org_st_temp["ANY"] # default to any
    else
      org_st = org_st_temp
    end

    org_st
  end

  def primary_activity
    if _struct_type == "Coop Promoter/Supporter"
      "Campaigning, Activism & Advocacy"
    else
      ECONOMIC_ACTIVITY_TO_ACTIVITY[_prim_activity] ? ECONOMIC_ACTIVITY_TO_ACTIVITY[_prim_activity] : ""
    end
  end

  def activities
    if _sup_activities
      _sup_activities
        .split(",")
        .map { |a| ECONOMIC_ACTIVITY_TO_ACTIVITY[a.strip] ? ECONOMIC_ACTIVITY_TO_ACTIVITY[a.strip] : nil }
        .compact.join(SeOpenData::CSV::Standard::V1::SubFieldSeparator)
    else
      ""
    end
  end

  # Adds a new last column `Id` and inserts in it a numeric index in each row.
  #
  # @param input - an input stream, or the name of a file to read
  # @param output - an output stream, or the name of a file to read
  def self.add_unique_ids(input:, output:)
    input = File.open(input) unless input.is_a? IO
    output = File.open(output, "w") unless output.is_a? IO

    csv_opts = {}
    csv_opts.merge!(headers: true)

    csv_in = ::CSV.new(input, csv_opts)
    csv_out = ::CSV.new(output)
    headers = nil
    i = 0
    csv_in.each do |row|
      unless headers
        headers = row.headers
        headers.push("Id")
        csv_out << headers
      end
      row["Id"] = i
      i += 1
      csv_out << row
    end
  ensure
    input.close
    output.close
  end

  def self.clean_headers(input:, output:)
    # removes quotation marks in headers
    input = File.open(input) unless input.is_a? IO
    output = File.open(output, "w") unless output.is_a? IO

    File.open(input) { |inp|
      File.open(output, "w") { |outp|
        headers = nil

        inp.each_line { |line|
          if !headers
            headers = line
            headers.gsub! "\"", ""
            outp.print headers
          else
            outp.print line
          end
        }
      }
    }
  end

  # Transforms the rows from Co-ops UK schema to our standard
  #
  # @param input - an input stream, or the name of a file to read
  # @param output - an output stream, or the name of a file to read
  def self.convert(input:, output:)
    input = File.open(input) unless input.is_a? IO
    output = File.open(output, "w") unless output.is_a? IO

    # Note the use of #read, convert expects a string so it can remove
    # BOMs. Possibly not required if the csv has already been cleaned
    # up?
    SeOpenData::CSV.convert(
      output, SeOpenData::CSV::Standard::V1::Headers,
      input.read, self, {}
    )
  ensure
    input.close
    output.close
  end

  # Entry point if invoked as a script.
  #
  #
  # Expects a config file in a directory `./settings` relative to this
  # script, called either `default.txt` or `config.txt`. The latter is
  # loaded preferentially, otherwise the former is.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config_file = Dir.glob(__dir__ + "/settings/{config,defaults}.txt").first
    config = SeOpenData::Config.new(config_file)

    # original src csv files
    csv_to_standard_1 = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV_1)

    # Intermediate csv files
    cleared_errors = File.join(config.GEN_CSV_DIR, "cleared_errors.csv")
    converted = File.join(config.GEN_CSV_DIR, "converted.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV

    if (File.file?(output_csv))
      puts "Refusing to overwrite existing output file: #{output_csv}"
    else
      #

      ## handle limesurvey
      # generate the cleared error file
      clean_headers input: csv_to_standard_1, output: cleared_errors
      convert input: cleared_errors, output: converted
      # add locations TODO this should be making direct calls to the bin, instead of calling the system
      latlngcmd = "ruby -I #{config.SE_OPEN_DATA_LIB_DIR} #{config.SE_OPEN_DATA_BIN_DIR}csv/standard/add-postcode-lat-long.rb " +
                  "--postcodeunit-cache #{UK_POSTCODES_CACHE} --postcode-global-cache #{GLOBAL_POSTCODES_CACHE} --replace-address false" +
                  " #{converted} > #{output_csv}"
      puts latlngcmd
      system latlngcmd
      # ruby -I /home/dean/Documents/sea/open-data/tools/se_open_data/lib  ../../tools/se_open_data/bin/csv/standard/add-postcode-lat-long.rb --postcodeunit-cache postcode_lat_lng.json --postcode-global-cache geodata_cache.json generated-data/experimental/csv/de-duplicated.csv > generated-data/experimental/csv/corrected-geo-data.csv

    end
  end

  private

  EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  LAT_LNG_REGEX = /^\-?\d+\.{1}\d+$/i
  UK_POSTCODES_CACHE = "postcode_lat_lng.json"
  GLOBAL_POSTCODES_CACHE = "geodata_cache.json"

  # See https://github.com/SolidarityEconomyAssociation/open-data/issues/11#issuecomment-606719676
  # And: https://vocabs.solidarityeconomy.coop/essglobal/V2a/html-content/essglobal.html#H6.1
  # maps structure type to (map typology to essOrganisationalStructure) or essOrganisationalStructure
  #     "Structure Type" => {"Typology" => "Ess Global Organisational Structure"},
  #     "Structure Type" => "Ess Global Organisational Structure"
  # any is the default case for typology
  TYPE_TO_ORG_STRUCT = {
    "Coop Promoter/Supporter" => "Company (Other)",
    "Cooperative" => { "Consumer/User coops" => "Consumer co-operative",
                       "Multi-stakeholder coops" => "Multi-stakeholder co-operative",
                       "Producer coops" => "Producer co-operative",
                       "Worker coops" => "Workers co-operative",
                       "ANY" => "Co-operative" },
    "Mutual organisation" => "Mutual",
    "National apex" => "National apex",
    "National sectoral federation or union" => "National sectoral federation or union",
    "Regional, state or provincial level federation or union" => "Regional, state or provincial level federation or union",
    "Supranational" => "Supranational",
    "Cooperative Group" => "Cooperative group",
    "Cooperative of cooperatives / mutuals" => "Government agency/body",
  }

  ECONOMIC_ACTIVITY_TO_ACTIVITY = {
    "Education / health / social work" => "Education",
    "Financial services" => "Money & Finance",
    "Fishing" => "Food",
    "Housing" => "Housing",
    "Insurance" => "Money & Finance",
    "Other services" => "Goods & Services",
    "Wholesale and retail trade" => "Goods & Services",
    "Agriculture" => "Agriculture",
    "Utilities" => "Utilities",
    "Industry" => "Industry",
  }

  # These define methods (as keys) to implement as simple hash
  # look-ups using CSV field names (values).
  #
  InputHeaders = {
    id: "Contact ID",
    postcode: "Main-Postal Code",
    country_name: "Country",
    locality: "Main-City",
    phone: "Main-Phone-Phone",

    _street_address: "Main-Street Address",
    _sup_street_address_1: "Main-Supplemental Address 1",
    _sup_street_address_2: "Main-Supplemental Address 2",
    _name: "Organisation Name",
    _website: "Website",
    _typology: "Typology",
    _struct_type: "Structure Type",
    _prim_activity: "Economic activity (primary)",
    _sup_activities: "Economic activities (additional)",
  }
  # MISSING!
  # primary_activity (name?)
  # activities
  # region (region?)
  # postcode
  # phone
  # twitter
  # facebook
  # companies_house_number
  # geocontainer
  # geocontainer_lat
  # geocontainer_lon

end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
IcaYouthNetworkConverter.main if __FILE__ == $0
