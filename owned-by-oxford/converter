#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
#
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data'
require 'se_open_data/config'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schema/types'
require 'se_open_data/csv/converter/limesurveycore'
require 'csv'


module Converter
  
  # The output schema
  StdSchema = SeOpenData::CSV::Schemas::Latest

  # A convenient alias...
  Types = SeOpenData::CSV::Schema::Types

  # Convert the exported JSON into CSV
  #
  # This is as simple as possible, the more complex things are done in
  # the conversion of this to standard.csv format.
  def self.convert_to_csv(headers:, input:, output:)
    input = File.read(input) unless input.is_a? IO
    output = output.is_a?(IO) ? CSV.new(output) : CSV.open(output, 'wb') 

    output << headers

    j_input = JSON.parse(input);
    j_input['records'].each do |record|
      fields = record['fields']
      output << headers.collect do |header|
        if header == 'id'
          record['id']
        else
          field = fields.fetch(header, nil)
          if field.is_a? Array
            Types.multivalue_join(field)
          else
            field
          end
        end
      end
    end
  ensure
    output.close
  end

  def self._prefix(stem, value)
    if value
      stem+value
    else
      nil
    end
  end

  def self._multi_prefix(stem, values)
    if values
      Types.multivalue(values) do |value|
        stem+value
      end
    else
      nil
    end
  end
  
  # Returns a schema converter for the given schema.
  #
  # This defines a schema mapping data into the standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  def self.mk_converter(from_schema:, to_schema:)
    # Find the config file...
    config = SeOpenData::Config.load
    essglobal = config.ESSGLOBAL_URI
    ac = "#{essglobal}standard/activities-modified/"
    os = "#{essglobal}standard/organisational-structure/"
    
    return SeOpenData::CSV::Schema.converter(
             from_schema: from_schema,
             to_schema: to_schema,
             input_csv_opts: {skip_blanks: true}
             #    output_csv_opts: {quote_empty: false}
           ) do
      | # These parameters match source schema field ids
        id:,
        name:,
        website:,
        street:,
        postcode:,
        latitude:,
        longitude:,
        description:,
        primary_activity:,
        primary_activity_label:,
        primary_activity_id:,
        secondary_activities:,
        secondary_activity_labels:,
        secondary_activity_ids:,
        organisational_structures:,
        organisational_structure_labels:,
        organisational_structure_ids:,
        ext_uri:,
        ext_name:,
        ext_description:,
        ext_street_address:,
        ext_postcode:,
        ext_website:,
        ext_primary_activity:,
        ext_primary_activity_id:,
        ext_secondary_activities:,
        ext_secondary_activity_ids:,
        ext_organisational_structures:,
        ext_organisational_structure_ids:,
        ext_latitude:,
        ext_longitude:,
        approved:
        |
        if approved&.downcase == 'true'
          name ||= ext_name
          raise "No name for item ##{id}" unless name
          {
            id: id.delete_prefix('rec'),
            name: name || ext_name,
            description: description || ext_description,
            organisational_structure: _multi_prefix(os, organisational_structure_ids || ext_organisational_structure_ids),
            primary_activity: _prefix(ac, primary_activity_id || ext_primary_activity_id),
            activities: _multi_prefix(ac, secondary_activity_ids || ext_secondary_activity_ids),
            street_address: street || ext_street_address,
            locality: 'Oxford',
            region: nil,
            postcode: postcode || ext_postcode,
            country_id: 'GB',
            territory_id: nil,
            homepage: Types.normalise_url(website || ext_website, default: nil),
            phone: nil,
            email: nil,
            twitter: nil,
            facebook: nil,
            companies_house_number: nil,
            qualifiers: nil,
            base_membership_type: nil,
            latitude: latitude || ext_latitude,
            longitude: longitude || ext_longitude,
            geocontainer: nil,
            geocontainer_lat: nil,
            geocontainer_lon: nil,
          };
        end
      end
  end
         
  # Entry point if invoked as a script.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load

    # This defines the input CSV schema we expect (after clean-up an index generation)
    schema = SeOpenData::CSV::Schema.load_file(config.ORIGINAL_CSV_SCHEMA)
    
    # This defines the output CSV schema
    output_schema = SeOpenData::CSV::Schema.load_file("output.yml")
    
    # original data file
    original_data = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Intermediate csv files
    converted_csv = File.join(config.GEN_CSV_DIR, "converted.csv")
    standard_csv = File.join(config.GEN_CSV_DIR, "standard.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV

    # Convert the JSON data to csv.
    convert_to_csv(headers: schema.field_headers, input: original_data, output: converted_csv)
    
    # A converter between the input and standard csv schema
    converter = mk_converter(from_schema: schema, to_schema: output_schema)

    # Convert the csv to the standard schema
    converter.convert File.open(converted_csv), standard_csv

    SeOpenData::CSV::Converter::LimeSurveyCore
      .add_postcode_lat_long(infile: standard_csv, outfile: output_csv,
                             lat_lng_cache: config.POSTCODE_LAT_LNG_CACHE,
                             to_schema: StdSchema)
  rescue => e
    raise "error transforming #{original_data} into #{output_csv}: #{e.message}"
  end

  private


end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0

