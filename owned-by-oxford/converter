#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
#
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data/config'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schema/types'
require 'se_open_data/csv/converter/limesurveycore'
require 'csv'


module Converter
  
  # A convenient alias...
  Types = SeOpenData::CSV::Schema::Types

  MultiFields = [
    'Nature of Organisation',
    'Organisational Structure',
    'Organisational Structure ID',
    'Organisational Structure Label',
    'Activities',
    'Activities ID',
    'Activities Label',
    'Secondary Activites',
    'Secondary Activites ID',
    'Secondary Activites Label',
    'Membership Type',
    'Membership Type ID',
    'Membership Type Label',
    'Street Address (from External Initiative)',
    'Organisational Structure (from External Initiative)',
    'Organisational Structure ID (from External Initiative)',
    'Organisational Structure Label (from External Initiative)',
    'Activities (from External Initiative)',
    'Activities ID (from External Initiative)',
    'Activities Label (from External Initiative)',
    'Membership Type (from External Initiative)',
    'Membership Type ID (from External Initiative)',
    'Membership Type Label (from External Initiative)',
  ]

  def self.parse_no(nature_of_org)
    case(nature_of_org.to_s.downcase.gsub(/\s+/, ''))
    when 'obocriteriaenterprise'
      'communityEnt'
    when 'supportortrainingorganisation'
      'supportOrg'
    else
      raise "Unrecognised value for nature_of_org: #{nature_of_org}"
    end
  end

  # Splits the field by the given delimiter, passes to the block for mapping,
  #
  # Parses the block like a CSV row, with default delimiter
  # character ';' and quote character "'" (needed for values
  # with the delimiter within). The escape character is '\\'
  #
  # @param val [String] the multi-value field
  # @param delim [String] the sub-field delimiter character to parse
  # @param quote [String] the sub-field quote character to parse
  def self.multivalues(val, delim: ';', quote: "'")
    subfields = ::CSV.parse_line(val.to_s, quote_char: quote, col_sep: delim).to_a
    return subfields.collect {|field| field.strip }.compact
  rescue
    raise "failed to parse multivalue field (#{val}) with delims #{delim} and quote #{quote}"
  end

  # Convert the exported JSON into CSV
  #
  # This is as simple as possible, the more complex things are done in
  # the conversion of this to standard.csv format.
  def self.convert_to_csv(headers:, input:, output:)
    input = File.read(input) unless input.is_a? IO
    output = output.is_a?(IO) ? CSV.new(output) : CSV.open(output, 'wb') 

    output << headers

    j_input = JSON.parse(input);
    j_input['records'].each do |record|
      fields = record['fields']
      output << headers.collect do |header|
        if header == 'id'
          record['id']
        else
          field = fields.fetch(header, nil)
          if field.is_a? Array
            if MultiFields.include?(header) || field.size > 1
              Types.multivalue_join(field)
            elsif field.size == 1
              # Treat this as a single element field.
              field[0] # Doesn't quote like multivalue_join!
            else
              ''
            end
          else
            field
          end
        end
      end
    end
  ensure
    output.close
  end

  def self._prefix(stem, value)
    if value
      stem+value
    else
      nil
    end
  end

  def self._multi_prefix(stem, values)
    if values
      Types.multivalue(values) do |value|
        stem+value
      end
    else
      nil
    end
  end
  
  # Returns a schema converter for the given schema.
  #
  # This defines a schema mapping data into the standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  def self.mk_converter(from_schema:, to_schema:, geocode:)
    # Find the config file...
    config = SeOpenData::Config.load
    essglobal = config.ESSGLOBAL_URI
    ac = "#{essglobal}standard/activities-modified/"
    os = "#{essglobal}standard/organisational-structure/"
    
    return SeOpenData::CSV::Schema.converter(
             from_schema: from_schema,
             to_schema: to_schema,
             input_csv_opts: {skip_blanks: true}
             #    output_csv_opts: {quote_empty: false}
           ) do
      | # These parameters match source schema field ids
        id:,
        name:,
        nature_of_org:,
        website:,
        street:,
        postcode:,
        latitude:,
        longitude:,
        description:,
        type_of_relationship:,
        primary_activity:,
        primary_activity_label:,
        primary_activity_id:,
        secondary_activities:,
        secondary_activity_labels:,
        secondary_activity_ids:,
        organisational_structures:,
        organisational_structure_labels:,
        organisational_structure_ids:,
        contact_email:,
        ext_uri:,
        ext_name:,
        ext_description:,
        ext_street_address:,
        ext_postcode:,
        ext_website:,
        ext_primary_activity:,
        ext_primary_activity_id:,
        ext_secondary_activities:,
        ext_secondary_activity_ids:,
        ext_organisational_structures:,
        ext_organisational_structure_ids:,
        ext_latitude:,
        ext_longitude:,
        approved:
        |
        if approved&.downcase == 'true'
          name ||= ext_name
          raise "No name for item ##{id}" unless name

          primary_activity_uris = _prefix(ac, primary_activity_id || ext_primary_activity_id)
          secondary_activity_uris = _multi_prefix(ac, secondary_activity_ids || ext_secondary_activity_ids)
          combined_activity_ids = [primary_activity_id || ext_primary_activity_id,
                                   secondary_activity_ids || ext_secondary_activity_ids]
                                    .compact.join(';')
          combined_activity_uris = _multi_prefix(ac, combined_activity_ids)

          street_address = street || multivalues(ext_street_address).join(",\n")
          city = 'Oxford'
          postcode ||= ext_postcode
          country = 'Great Britain'
          country_id = 'GB'
          geocoded_addr = nil
          geocoded = nil
          unless street_address.to_s == '' and postcode.to_s == ''
            geocoded_addr =
              [
                street_address,
                city,
                postcode,
                country,
              ].compact
                # try to clean up funny addresses with extra commas etc.
                .map {|it| it.strip.gsub(/[;,](\s*[;,])*\s*/, ', ').gsub(/[\s,;]*$/, '') }
                .select {|it| it != '' }
                .join(", ")
          
            geocoded = geocode.call(geocoded_addr)
          end
          
          {
            id: id.delete_prefix('rec'),
            name: name || ext_name,
            nature_of_org: Types.multivalue(nature_of_org) {|subfield| parse_no(subfield) },
            description: description || ext_description,
            relationship_to_obo: Types.multivalue(type_of_relationship) {|subfield| subfield.chomp },
            organisational_structure: _multi_prefix(os, organisational_structure_ids || ext_organisational_structure_ids),
            primary_activity: primary_activity_uris,
            activities: secondary_activity_uris,
            combined_activities: combined_activity_uris,
            street_address: street_address,
            locality: city,
            region: nil,
            postcode: postcode,
            country_id: country_id,
            territory_id: nil,
            homepage: Types.normalise_url(website || ext_website, default: nil),
            phone: nil,
            email: Types.normalise_email(contact_email),
            twitter: nil,
            facebook: nil,
            companies_house_number: nil,
            qualifiers: nil,
            base_membership_type: nil,
            # Use lat/lng fields if set, else use the external initiative lat/lng fields
            latitude: (latitude.to_s == '' ? ext_latitude : latitude),
            longitude: (longitude.to_s == '' ? ext_longitude : longitude),
            geocontainer: geocoded&.osm_uri,
            geocontainer_lat: geocoded&.lat,
            geocontainer_lon: geocoded&.lng,
            geocontainer_confidence: geocoded&.confidence,
            geocoded_addr: geocoded_addr,
          };
        end
      end
  end
         
  # Entry point if invoked as a script.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load

    # Get the Geoapify API key
    pass = SeOpenData::Utils::PasswordStore.new(use_env_vars: config.USE_ENV_PASSWORDS)
    api_key = pass.get config.GEOCODER_API_KEY_PATH

    # And the Geodata cache
    cache = SeOpenData::Utils::FileCache.new.load(config.GEODATA_CACHE)

    # And make a geocoder
    geocode = SeOpenData::Geocoding.new.build(
      lookup: :geoapify,
      api_key: api_key,
      cache: cache,
    )

    # This defines the input CSV schema we expect (after clean-up an index generation)
    schema = SeOpenData::CSV::Schema.load_file(config.ORIGINAL_CSV_SCHEMA)
    
    # This defines the output CSV schema
    output_schema = SeOpenData::CSV::Schema.load_file("output.yml")
    
    # original data file
    original_data = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Intermediate csv files
    converted_csv = File.join(config.GEN_CSV_DIR, "converted.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV

    # Convert the JSON data to csv.
    convert_to_csv(headers: schema.field_headers, input: original_data, output: converted_csv)
    
    # A converter between the input and standard csv schema
    converter = mk_converter(from_schema: schema, to_schema: output_schema, geocode: geocode)

    # Convert the csv to the standard schema
    converter.convert File.open(converted_csv), output_csv

  rescue => e
    raise "error transforming #{original_data} into #{output_csv}: #{e.message}"
  end

  private


end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0

