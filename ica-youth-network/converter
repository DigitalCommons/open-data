#!/usr/bin/env ruby
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
#
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `local.conf`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schema/types'
require 'csv'

# Code related to the ICA Youth-Network initiative data
module IcaYouthNetwork

  # This defines the input CSV schema we expect (after clean-up and
  # index generation, excuted in the main method below.)
  Schema = SeOpenData::CSV::Schema.load_file('schema.yml')

  # A convenient alias...
  types = SeOpenData::CSV::Schema::Types
  
  # This defines the schema mapping for ica-youth-network data into the
  # standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  # See discussion here for some background on the conversion logic:
  # https://github.com/SolidarityEconomyAssociation/open-data/issues/11
  Converter = SeOpenData::CSV::Schema.converter(
    from_schema: Schema,
    to_schema: SeOpenData::CSV::Schemas::Versions[0],
#    output_csv_opts: {quote_empty: false}
  ) do | # These parameters match source schema field ids
         id:,
         org_type:,
         name:,
         name2:,
         region:,
         country:,
         city:,
         latitude:,
         longitude:,
         size:,
         type:,
         sector:,
         address:,
         description:,
         additional:,
         website:,
         email:
         |
         # A mapping to the target schema field ids
    {
      id: id,
      name: name || "No Name",
      description: [description, additional].compact.join("<p>"),
      organisational_structure: normalise_org_struct(type),
      primary_activity: '',
      activities: '',
      street_address: address,
      locality: city,
      region: '',
      postcode: '',
      country_name: country,
      homepage: ([nil, '', 'n/a'].include?(website.downcase)?
        "" : types.multivalue(website) {|it| types.normalise_url(it, default: nil) }),
      phone: '',
      email: email.to_s.empty? ? '' : types.normalise_email(email),
      twitter: '',
      facebook: '',
      companies_house_number: '',
      latitude: types.normalise_float(latitude),
      longitude: types.normalise_float(longitude),
      geocontainer: '',
      geocontainer_lat: '',
      geocontainer_lon: '',
    }
  end

  # CSV file transform - adds a new last column `Id` and inserts in it
  # a numeric index in each row.
  #
  # @param input - an input stream, or the name of a file to read
  # @param output - an output stream, or the name of a file to write
  def self.add_unique_ids(input:, output:)
    input = File.open(input) unless input.is_a? IO
    output = File.open(output, 'w') unless output.is_a? IO

    csv_opts = {}
    csv_opts.merge!(headers: true)

    csv_in = ::CSV.new(input, **csv_opts)
    csv_out = ::CSV.new(output)
    headers = nil
    i = 0
    csv_in.each do |row|
      unless headers
        headers = row.headers
        headers.push("Id")
        csv_out << headers
      end
      row['Id'] = i
      i+=1
      csv_out << row
    end

  ensure
    input.close
    output.close
  end

  # Entry point if invoked as a script.
  #
  # Expects a config file in the same directory as this script, called
  # either `default.conf` or `local.conf`. The latter is loaded
  # preferentially, otherwise the former is.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load(base: __dir__)

    # original src csv files 
    csv_to_standard = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Intermediate csv files
    added_ids = File.join(config.GEN_CSV_DIR, "with_ids.csv")
    cleared_errors = File.join(config.GEN_CSV_DIR, "cleared_errors.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV

    ## handle limesurvey
    # generate the cleared error file
    SeOpenData::CSV.clean_up in_f: csv_to_standard, out_f: cleared_errors
    add_unique_ids input: cleared_errors, output: added_ids

    # Transforms the rows from Co-ops UK schema to our standard
    Converter.convert added_ids, output_csv
  end

  private
  
  # This maps strings in the "Type" field in the input data into
  # values we can use in the SSE standard "Organizational Structure"
  # field.
  #
  # See
  # https://github.com/SolidarityEconomyAssociation/open-data/issues/11#issuecomment-606719676
  # And:
  # https://vocabs.solidarityeconomy.coop/essglobal/V2a/html-content/essglobal.html#H6.1
  #
  # @param val [String] The value to convert
  # @return [String] A valid "Organizational Structure" value
  def self.normalise_org_struct(val)
    # Strictly this should allow multiple values delimited by ';'
    TYPE_TO_ORG_STRUCT[val] || "Co-operative"
  end

  TYPE_TO_ORG_STRUCT = {
    "Cooperativa de consumo / usuario final" => "Consumer co-operative",
    "Coop\uFFFDrative de consommateur.rice.s" => "Consumer co-operative",
    "Final consumer/user cooperative" => "Consumer co-operative",
    "Cooperativa de m\uFFFDltiples actores" => "Multi-stakeholder co-operative",
    "Coop\uFFFDrative pluri-acteurs" => "Multi-stakeholder co-operative",
    "Multi-stakeholder cooperative" => "Multi-stakeholder co-operative",
    "Cooperativa de producci\uFFFDn" => "Producer co-operative",
    "Coop\uFFFDrative de producteur.rice.s (dont agricole)" => "Producer co-operative",
    "Producer cooperative" => "Producer co-operative",
    "Cooperativa de trabajo y empleo" => "Self-employed",
    "Cooperativa di lavoro" => "Self-employed",
    "Work and employment cooperative" => "Self-employed",
    "Coop\uFFFDrative de travailleur.se.s" => "Workers co-operative",
  }

end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
IcaYouthNetwork.main if __FILE__ == $0

