#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data/utils/password_store'
require 'se_open_data/config'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schemas'
require 'se_open_data/csv/schema/types'
require 'se_open_data/csv/standard'
require 'normalize_country'

class Converter

  # The output schema
  StdSchema = SeOpenData::CSV::Schemas::Latest

  ACI = "activities-ica/"
  BMT = "base-membership-type/"
  OS = "organisational-structure/"
  # QF = "qualifiers/"
  COUN = "countries-iso/"
  #  REG = "regions-ica/"
  #  SREG = "super-regions-ica/"

  @@sic_code_to_sic_section = {}
  @@sic_division_to_ica_activity = {}
  @@legal_ownership_to_org_membership = {}
  
  def self.uk_nation_to_code(uk_nation) 
    case (uk_nation)
    when 'England','Scotland','Wales','Northern Ireland','Isle of Man'
      'GB'
    when 'Jersey'
      'JE'
    when ''
      ''
    else
      warn "Unknown nation #{uk_nation} -> GB";
      'GB'
    end
  end

  # Fill in blanks and nulls with some value, typically the taxonomy value for "Unknown"
  def self.fill(value, default)
    case(value)
    when nil
      default
    when ""
      default
    else
      value
    end
  end

  # Prepend an ID with a base, but only if it is set
  def self.prepend(base, id)
     return nil if id == nil or id == ""
     base+id
  end
  
  # Returns a schema converter for the given schema.
  #
  # This defines the schema mapping for original data into the
  # standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  def self.mk_converter(from_schema:, to_schema:, geocode:, config:)
      # A convenient alias...
    types = SeOpenData::CSV::Schema::Types
    ess = config.ESSGLOBAL_URI + 'standard/'

    return SeOpenData::CSV::Schema.converter(
      from_schema: from_schema,
      to_schema: to_schema,
      input_csv_opts: {skip_blanks: true},
      reject_invalid_pks: true,
      reject_duplicate_pks: true,
      #    output_csv_opts: {quote_empty: false}
    ) do | # These parameters match source schema field ids
             display_name: ,
             contact_id: ,
             sic_code: ,
             type_of_organisation: ,
             legal_form: ,
             ownership_type: ,
             industry: ,
             registered_status: ,
             registered_number: ,
             cuk_id: ,
             incorporation_date: ,
             description: ,
             organisational_structure: ,
             primary_activity: ,
             sector: ,
             membership_type: ,
             sic_section: ,
             registrar: ,
             street_address: ,
             supplemental_address_1: ,
             supplemental_address_2: ,
             city: ,
             postal_code: ,
             country: ,
             country_code: ,
             latitude: ,
             longitude: ,
             email: ,
             website: 
           |

           geocoded_addr =
             [
               street_address,
               supplemental_address_1,
               supplemental_address_2,
               city,
               postal_code,
               country
             ].keep_if{|it| it&.match(/\S/)}.join(', ')
           
           geocoded = geocode.call(geocoded_addr)
           
           # A mapping to the target schema field ids
           {
             id: contact_id,
             name: display_name,
             description: description,
             organisational_structure: prepend(ess+OS, organisational_structure),
             primary_activity: prepend(ess+ACI, primary_activity),
             activities: nil,
             street_address: street_address,
             locality: city,
             region: nil,
             postcode: postal_code,
             country_id: prepend(ess+COUN, country_code),
             territory_id: nil,
             homepage: types.normalise_url(website, default: nil),
             phone: nil,
             email: email,
             twitter: nil,
             facebook: nil,
             companies_house_number: registrar == "1"? registered_number : nil,
             qualifiers: nil,
             base_membership_type: prepend(ess+BMT, membership_type),
             latitude: latitude,
             longitude: longitude,
             geocontainer: geocoded&.osm_uri,
             geocontainer_lat: geocoded&.lat,
             geocontainer_lon: geocoded&.lng,
             geocontainer_confidence: geocoded&.confidence,
             geocoded_addr: geocoded_addr,
             supplemental_address_1: supplemental_address_1,
             supplemental_address_2: supplemental_address_2,
             sector: fill(sector, 17),
             sic_section: sic_section,
             sic_code: sic_code,
             ownership_type: fill(ownership_type, 3),
             industry: fill(industry, 17),
             legal_form: fill(legal_form, 11),
             type_of_organisation: fill(type_of_organisation, 2),
             registered_status: fill(registered_status, 5),
             registered_number: registered_number,
             registrar: fill(registrar, 3),
             incorporation_date: incorporation_date,
             cuk_id: cuk_id

           }
    end
  end

  # Entry point if invoked as a script.
  #
  #
  # Expects a config file in a directory `./settings` relative to this
  # script, called either `default.txt` or `config.txt`. The latter is
  # loaded preferentially, otherwise the former is.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load

    # original src csv files
    original_csv = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Intermediate csv files
    converted = File.join(config.GEN_CSV_DIR, "converted.csv")

    # Output csv files
    output_csv = config.STANDARD_CSV

    # Get the Geoapify API key
    pass = SeOpenData::Utils::PasswordStore.new(use_env_vars: config.USE_ENV_PASSWORDS)
    api_key = pass.get config.GEOCODER_API_KEY_PATH

    # This defines the input and output CSV schemas (after clean-up and geolocation)
    input_schema = SeOpenData::CSV::Schema.load_file(config.ORIGINAL_CSV_SCHEMA)
    output_schema = SeOpenData::CSV::Schema.load_file("output.yml")
    
    cache = SeOpenData::Utils::FileCache.new.load(config.GEODATA_CACHE)

    geocode = SeOpenData::Geocoding.new.build(
      lookup: :geoapify,
      api_key: api_key,
      cache: cache,
    )

    # A converter between the two
    converter = mk_converter(from_schema: input_schema, to_schema: output_schema,
                             geocode: geocode, config: config)

    # Transforms to our standard CSV schema.
    # Note the BOM and encoding flags, which avoid a MalformedCSVError
    stream = File.open(original_csv, "r:bom|utf-8")
    converter.convert stream, output_csv
    
  end

  private

end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0
