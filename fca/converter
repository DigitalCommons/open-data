#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
#
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data/config'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schema/types'
require 'se_open_data/geocoding'
require 'se_open_data/utils/file_cache'
require 'se_open_data/utils/password_store'
require 'normalize_country'
require 'csv'

module Converter
  
  # A convenient alias...
  Types = SeOpenData::CSV::Schema::Types

  # The output schema
  OutSchema = SeOpenData::CSV::Schema.load_file("output.yml")
  
  # Returns a schema converter for the given schema.
  #
  # This defines a schema mapping data into the standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  def self.mk_converter(from_schema:, to_schema:, geocode:)
    # Find the config file...
    config = SeOpenData::Config.load
    essglobal = config.ESSGLOBAL_URI

    return SeOpenData::CSV::Schema.converter(
             from_schema: from_schema,
             to_schema: to_schema,
             input_csv_opts: {skip_blanks: true}
             #    output_csv_opts: {quote_empty: false}
           ) do
      | # These parameters match source schema field ids
        uninum:,
        institutionname:,
        district:,
        hq_state:,
        ceo:,
        cio:,
        rssd:
        |
        addr =
        [
          hq_state,
          'USA'
        ].compact
          # try to clean up funny addresses with extra commas etc.
          .map {|it| it.strip.gsub(/[;,](\s*[;,])+/, ',').gsub(/[\s,;]*$/, '') }
          .select {|it| it != '' }
          .join(", ")
        geocoded = nil # geocode.call(addr) # don't geocode just the state...

        warn [uninum, institutionname].inspect
          {
            id: uninum,
            name: institutionname,
            description: nil,
            organisational_structure: nil,
            primary_activity: 'ICA140', # Financial Services
            activities: nil,
            street_address: nil,
            locality: nil,
            region: hq_state,
            postcode: nil,
            country_id: 'US',
            territory_id: nil,
            homepage: nil,
            phone: nil,
            email: nil,
            twitter: nil,
            facebook: nil,
            companies_house_number: nil,
            qualifiers: nil,
            base_membership_type: nil,
            # these fields depend on the street address
            latitude: nil,
            longitude: nil,
            geocontainer: geocoded&.osm_uri,
            geocontainer_lat: geocoded&.lat,
            geocontainer_lon: geocoded&.lng,
            geocontainer_confidence: geocoded&.confidence,
            geocoded_addr: addr,
          };
      end
  end
         
  # Entry point if invoked as a script.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load

    # This defines the input CSV schema we expect (after clean-up an index generation)
    schema = SeOpenData::CSV::Schema.load_file(config.ORIGINAL_CSV_SCHEMA)
    
    # This defines the output CSV schema
    output_schema = SeOpenData::CSV::Schema.load_file("output.yml")
    
    # original data file
    original_data = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Get the Geoapify API key
    pass = SeOpenData::Utils::PasswordStore.new(use_env_vars: config.USE_ENV_PASSWORDS)
    api_key = pass.get config.GEOCODER_API_KEY_PATH

    cache = SeOpenData::Utils::FileCache.new.load(config.GEODATA_CACHE)

    geocode = SeOpenData::Geocoding.new.build(
      lookup: :geoapify,
      api_key: api_key,
      cache: cache,
    )
    
    # A converter between the input and standard csv schema
    converter = mk_converter(from_schema: schema, to_schema: OutSchema, geocode: geocode)

    
    # Convert the csv to the standard schema
    converter.convert File.open(original_data), config.STANDARD_CSV

  rescue => e
    raise "error transforming #{original_data} into #{config.STANDARD_CSV}: #{e.message}"
  end

  private


end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0

