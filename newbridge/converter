#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
#
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run_all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require_relative '../tools/se_open_data/lib/load_path'
require 'se_open_data'
require 'se_open_data/config'
require 'se_open_data/csv/add_postcode_lat_long'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schema/types'
require 'csv'

# Code related to the Oxford SSE initiative data
module NewBridgeProject
  OutputStandard = SeOpenData::CSV::Standard::V1 # FIXME remove
  
  # This defines the input CSV schema we expect (after clean-up an index generation)
  Schema = SeOpenData::CSV::Schema.new(
    id: :newbridge,
    name: "Solidarity Oxford",
    version: 20200620, # FIXME think about this
    comment: 'Initial version, may require amendment',
    fields: [
      {id: :id,
       header: 'id',
       desc: 'A unique identifier for this initiative',
       comment: '',
      },
      {id: :submitdate,
       header: 'submitdate',
       desc: '',
       comment: '',
      },
      {id: :lastpage,
       header: 'lastpage',
       desc: '',
       comment: '',
      },
      {id: :startlanguage,
       header: 'startlanguage',
       desc: '',
       comment: '',
      },
      {id: :seed,
       header: 'seed',
       desc: '',
       comment: '',
      },
      {id: :startdate,
       header: 'startdate',
       desc: '',
       comment: '',
      },
      {id: :datestamp,
       header: 'datestamp',
       desc: '',
       comment: '',
      },
      {id: :ipaddr,
       header: 'ipaddr',
       desc: '',
       comment: '',
      },
      {id: :refurl,
       header: 'refurl',
       desc: '',
       comment: '',
      },
      {id: :name,
       header: 'name',
       desc: '',
       comment: '',
      },
      {id: :address_a,
       header: 'address[a]',
       desc: '',
       comment: '',
      },
      {id: :address_b,
       header: 'address[b]',
       desc: '',
       comment: '',
      },
      {id: :address_c,
       header: 'address[c]',
       desc: '',
       comment: '',
      },
      {id: :address_d,
       header: 'address[d]',
       desc: '',
       comment: '',
      },
      {id: :address_e,
       header: 'address[e]',
       desc: '',
       comment: '',
      },
      {id: :address_a1,
       header: 'address[a1]',
       desc: '',
       comment: '',
      },
      {id: :website,
       header: 'website',
       desc: '',
       comment: '',
      },
      {id: :facebook,
       header: 'facebook',
       desc: '',
       comment: '',
      },
      {id: :twitter,
       header: 'twitter',
       desc: '',
       comment: '',
      },
      {id: :description,
       header: 'description',
       desc: '',
       comment: '',
      },
      {id: :activity,
       header: 'activity',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ002,
       header: 'secondaryActivities[SQ002]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ003,
       header: 'secondaryActivities[SQ003]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ004,
       header: 'secondaryActivities[SQ004]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ005,
       header: 'secondaryActivities[SQ005]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ006,
       header: 'secondaryActivities[SQ006]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ007,
       header: 'secondaryActivities[SQ007]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ008,
       header: 'secondaryActivities[SQ008]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ009,
       header: 'secondaryActivities[SQ009]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ010,
       header: 'secondaryActivities[SQ010]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ011,
       header: 'secondaryActivities[SQ011]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ012,
       header: 'secondaryActivities[SQ012]',
       desc: '',
       comment: '',
      },
      {id: :secondaryActivities_SQ013,
       header: 'secondaryActivities[SQ013]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ001,
       header: 'structure[SQ001]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ002,
       header: 'structure[SQ002]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ003,
       header: 'structure[SQ003]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ004,
       header: 'structure[SQ004]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ005,
       header: 'structure[SQ005]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ006,
       header: 'structure[SQ006]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ007,
       header: 'structure[SQ007]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ008,
       header: 'structure[SQ008]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ009,
       header: 'structure[SQ009]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ010,
       header: 'structure[SQ010]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ011,
       header: 'structure[SQ011]',
       desc: '',
       comment: '',
      },
      {id: :structure_SQ012,
       header: 'structure[SQ012]',
       desc: '',
       comment: '',
      },
      {id: :network,
       header: 'network',
       desc: '',
       comment: '',
      },
      {id: :values_SQ001,
       header: 'values[SQ001]',
       desc: '',
       comment: '',
      },
      {id: :values_SQ002,
       header: 'values[SQ002]',
       desc: '',
       comment: '',
      },
      {id: :values_SQ003,
       header: 'values[SQ003]',
       desc: '',
       comment: '',
      },
      {id: :values_SQ004,
       header: 'values[SQ004]',
       desc: '',
       comment: '',
      },
      {id: :values_SQ005,
       header: 'values[SQ005]',
       desc: '',
       comment: '',
      },
      {id: :websiteConsent,
       header: 'websiteConsent',
       desc: '',
       comment: '',
      },      
      {id: :location,
       header: 'location',
       desc: '',
       comment: '',
      },
      {id: :contactName,
       header: 'contactName',
       desc: '',
       comment: '',
      },
      {id: :contactEmail,
       header: 'contactEmail',
       desc: '',
       comment: '',
      },
      {id: :contactPhone,
       header: 'contactPhone',
       desc: '',
       comment: '',
      },
      {id: :attendWorkshop,
       header: 'attendWorkshop',
       desc: '',
       comment: '',
      },
      {id: :contactConsent_SQ001,
       header: 'contactConsent[SQ001]',
       desc: '',
       comment: '',
      },
      {id: :contactConsent_SQ002,
       header: 'contactConsent[SQ002]',
       desc: '',
       comment: '',
      },
      {id: :suggestedInitiatives,
       header: 'suggestedInitiatives',
       desc: '',
       comment: '',
      },
      {id: :approved,
       header: 'approved',
       desc: 'Will be "Yes" if this initiative has been validated and approved by an admin',
       comment: 'Initiatives should only be imported if they are approved.',
      },
    ]
  )

  # A convenient alias...
  types = SeOpenData::CSV::Schema::Types
  
  # This defines the schema mapping for newbridge data into the
  # standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  # The response data downloaded from limesurvey via the API appears
  # to be different to that downloaded previously.
  # - semi-colon delimited, not comma delimited
  # - 'activities' field contains a identifier, not a human-readable phrase.
  #
  # The delimiter appears to be configurable in the web download, but not in the API.
  # https://bugs.limesurvey.org/view.php?id=13747
  Converter = SeOpenData::CSV::Schema.converter(
    from_schema: Schema,
    to_schema: SeOpenData::CSV::Schemas::Versions[0],
    input_csv_opts: {col_sep: ';', skip_blanks: true},
  ) do | # These parameters match source schema field ids
         id:,
         submitdate:,
         lastpage:,
         startlanguage:,
         seed:,
         startdate:,
         datestamp:,
         ipaddr:,
         refurl:,
         name:,
         address_a:,
         address_b:,
         address_c:,
         address_d:,
         address_e:,
         address_a1:,
         website:,
         facebook:,
         twitter:,
         description:,
         activity:,
         secondaryActivities_SQ002:,
         secondaryActivities_SQ003:,
         secondaryActivities_SQ004:,
         secondaryActivities_SQ005:,
         secondaryActivities_SQ006:,
         secondaryActivities_SQ007:,
         secondaryActivities_SQ008:,
         secondaryActivities_SQ009:,
         secondaryActivities_SQ010:,
         secondaryActivities_SQ011:,
         secondaryActivities_SQ012:,
         secondaryActivities_SQ013:,
         structure_SQ001:,
         structure_SQ002:,
         structure_SQ003:,
         structure_SQ004:,
         structure_SQ005:,
         structure_SQ006:,
         structure_SQ007:,
         structure_SQ008:,
         structure_SQ009:,
         structure_SQ010:,
         structure_SQ011:,
         structure_SQ012:,
         network:,
         values_SQ001:,
         values_SQ002:,
         values_SQ003:,
         values_SQ004:,
         values_SQ005:,
         websiteConsent:,
         location:,
         contactName:,
         contactEmail:,
         contactPhone:,
         attendWorkshop:,
         contactConsent_SQ001:,
         contactConsent_SQ002:,
         suggestedInitiatives:,
         approved:
         |
         # A mapping to the target schema field ids

         # Don't import this initiative if it isn't approved
         next unless approved&.downcase == 'yes'

         # Define some aliases
         arts = secondaryActivities_SQ002
         campaigning = secondaryActivities_SQ003
         community = secondaryActivities_SQ004
         education = secondaryActivities_SQ005
         energy = secondaryActivities_SQ006
         food = secondaryActivities_SQ007
         goods_services = secondaryActivities_SQ008
         health = secondaryActivities_SQ009
         housing = secondaryActivities_SQ010
         money = secondaryActivities_SQ011
         nature = secondaryActivities_SQ012
         reuse = secondaryActivities_SQ013
         
         community_group = structure_SQ001
         non_profit = structure_SQ002
         social_enterprise = structure_SQ003
         charity = structure_SQ004
         company = structure_SQ005
         workers_coop = structure_SQ006
         housing_coop = structure_SQ007
         consumer_coop = structure_SQ008
         producer_coop = structure_SQ009
         stakeholder_coop = structure_SQ010
         community_interest_company = structure_SQ011
         community_benefit_society = structure_SQ012

         (latitude, longitude) = [*location.to_s.split(';'), '', ''].collect &:strip
         {
      id: id,
      name: name,
      description: description,
      organisational_structure: [
        ## Return a list of strings, separated by OutputStandard::SubFieldSeparator.
        ## Each item in the list is a prefLabel taken from essglobal/standard/legal-form.skos.
        ## See lib/se_open_data/essglobal/legal_form.rb
        community_group == "Y" ? "Community group (formal or informal)" : nil,
        non_profit == "Y" ? "Not-for-profit organisation" : nil,
        social_enterprise == "Y" ? "Social enterprise" : nil,
        charity == "Y" ? "Charity" : nil,
        company == "Y" ? "Company (Other)" : nil,
        workers_coop == "Y" ? "Workers co-operative" : nil,
        housing_coop == "Y" ? "Housing co-operative" : nil,
        consumer_coop == "Y" ? "Consumer co-operative" : nil,
        producer_coop == "Y" ? "Producer co-operative" : nil,
        stakeholder_coop == "Y" ? "Multi-stakeholder co-operative" : nil,
        community_interest_company == "Y" ? "Community Interest Company (CIC)" : nil,
        community_benefit_society == "Y" ? "Community Benefit Society / Industrial and Provident Society (IPS)" : nil
      ].compact.join(OutputStandard::SubFieldSeparator),
      primary_activity: {
        'SQ001' => 'Arts, Media, Culture & Leisure',
        'SQ002' => 'Campaigning, Activism & Advocacy',
        'SQ003' => 'Community & Collective Spaces',
        'SQ004' => 'Education',
        'SQ005' => 'Energy',
        'SQ006' => 'Food',
        'SQ007' => 'Goods & Services',
        'SQ008' => 'Health, Social Care & Wellbeing',
        'SQ009' => 'Housing',
        'SQ010' => 'Money & Finance',
        'SQ011' => 'Nature, Conservation & Environment',
        'SQ012' => 'Reduce, Reuse, Repair & Recycle',
      }[activity] || '',
      activities:  [
        arts == "Y" ? "Arts, Media, Culture & Leisure" : nil,
        campaigning == "Y" ? "Campaigning, Activism & Advocacy" : nil,
        community == "Y" ? "Community & Collective Spaces" : nil,
        education == "Y" ? "Education" : nil,
        energy == "Y" ? "Energy" : nil,
        food == "Y" ? "Food" : nil,
        goods_services == "Y" ? "Goods & Services" : nil,
        health == "Y" ? "Health, Social Care & Wellbeing" : nil,
        housing == "Y" ? "Housing" : nil,
        money == "Y" ? "Money & Finance" : nil,
        nature == "Y" ? "Nature, Conservation & Environment" : nil,
        reuse == "Y" ? "Reduce, Reuse, Repair & Recycle" : nil
      ].compact.join(OutputStandard::SubFieldSeparator),
      street_address: [
        !address_a.empty? ? address_a : nil,
        !address_b.empty? ? address_b : nil,
        !address_c.empty? ? address_c : nil
      ].compact.join(OutputStandard::SubFieldSeparator),
      locality: address_d,
      region: '',
      postcode: address_e.to_s.upcase,
      country_name: '',
      homepage: normalise_url(website),
      phone: normalise_phone_number(contactPhone),
      email: contactEmail,
      twitter: normalise_twitter_handle(twitter),
      facebook: normalise_facebook_account(facebook),
      companies_house_number: '',
      latitude: latitude,
      longitude: longitude,
      geocontainer: '',
      geocontainer_lat: '',
      geocontainer_lon: '',
    }
  end

  # Entry point if invoked as a script.
  #
  #
  # Expects a config file in a directory `./settings` relative to this
  # script, called either `default.txt` or `config.txt`. The latter is
  # loaded preferentially, otherwise the former is.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    # FIXME simplify
    config = SeOpenData::Config.load

    # original src csv file
    original_csv = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Intermediate csv files
    initial_pass = File.join(config.GEN_CSV_DIR, "initiatives.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV

    # Get the Geoapify API key
    pass = SeOpenData::Utils::PasswordStore.new(use_env_vars: config.USE_ENV_PASSWORDS)
    api_key = pass.get config.GEOCODER_API_KEY_PATH
    
    # generate the cleared error file # FIXME remove if not needed
    # SeOpenData::CSV.clean_up in_f: csv_to_standard, out_f: cleared_errors
    
    # Transforms the rows from Co-ops UK schema to our standard
    # Note the BOM and encoding flags, which avoid a MalformedCSVError
    Converter.convert File.open(original_csv, "r:bom|utf-8"), initial_pass
    add_postcode_lat_long(infile: initial_pass, outfile: output_csv,
                          api_key: api_key, lat_lng_cache: config.POSTCODE_LAT_LNG_CACHE,
                          postcode_global_cache: config.GEODATA_CACHE)
  rescue => e
    raise "error transforming #{original_csv} into #{output_csv}: #{e.message}"
  end

  private


  def self.subhash(hash, *keys)
    keys = keys.select { |k| hash.key?(k) }
    Hash[keys.zip(hash.values_at(*keys))]
  end

  def self.normalise_phone_number(val)
    val
      .to_s
      .delete("() ")
      .sub(/^\+?44/, "0")
      .sub(/^00/, "0")
      .gsub(/[^\d]/, "")
  end

  def self.normalise_twitter_handle(val)
    val
      .downcase
      .sub(/h?t?t?p?s?:?\/?\/?w?w?w?\.?twitter\.com\//, "")
      .delete("@#/")
  end

  def self.normalise_facebook_account(val)
    val
      .downcase
      .sub(/h?t?t?p?s?:?\/?\/?w?w?w?\.?facebook\.com\//, "")
      .sub(/h?t?t?p?s?:?\/?\/?w?w?w?\.?fb\.com\//, "")
      .delete("@#/")
  end


  def self.normalise_url(website)
    if website && !website.empty? && website != "N/A"
      http_regex = /https?\S+/
      m = http_regex.match(website)
      if m
        m[0]
      else
        www_regex =  /^www\./
        www_m = www_regex.match(website)
        if www_m
          "http://#{website}"
        else
          add_comment("This doesn't look like a website: #{website} (Maybe it's missing the http:// ?)")
          nil
        end
      end
    end
  end

  def self.add_comment(txt)
    warn txt
  end

  def self.add_postcode_lat_long(infile:, outfile:, api_key:, lat_lng_cache:,
                                 postcode_global_cache:)
    input = File.open(infile, "r:bom|utf-8")
    output = File.open(outfile, "w")
    
    # Geoapify API key required
    
    geocoder = SeOpenData::CSV::Standard::GeoapifyStandard::Geocoder.new(api_key)
    geocoder_headers = SeOpenData::CSV::Standard::GeoapifyStandard::Headers
    SeOpenData::CSV._add_postcode_lat_long(
        input,
        output,
        OutputStandard::Headers[:postcode],
        OutputStandard::Headers[:country_name],
        subhash(OutputStandard::Headers,
                :geocontainer,
                :geocontainer_lat,
                :geocontainer_lon),
        lat_lng_cache,
        {},
        postcode_global_cache,
        subhash(OutputStandard::Headers,
                :street_address,
                :locality,
                :region,
                :postcode,
                :country_name),
        true,
        geocoder_headers,
        geocoder,
        true
      )
  ensure
    input.close
    output.close
  end
end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
NewBridgeProject.main if __FILE__ == $0

