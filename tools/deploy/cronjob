#!/bin/bash

set -o pipefail
set -o errexit

SCRIPT=${BASH_SOURCE[0]}
REPO_DIR=$(readlink -f ${SCRIPT%/*}/../..)
SEOD='bundle exec seod'

# Reformat the output of a command to make it easier to follow in logs
function logify() {
    local dir=$1
    shift
    printf "\n[For $dir: $*]\n"
    # Prefix STDOUT with space, but STDERR with an exclamation too
    "$@" > >(sed -e 's/^/  /') 2> >(sed -e 's/^/  ! /')
}

# Process one directory (passed as first argument)
#
# This should return a non-zero code if any part fails but the other
# dirs should still be processed (or possibly exit, in the extreme
# case when all processing should stop)
function process {
    local dir="${1:?directory argument required}"
    (
	cd $REPO_DIR/$dir &&
	logify $dir bundle install --quiet &&
	logify $dir $SEOD download &&
	logify $dir $SEOD convert &&
	logify $dir $SEOD generate &&
	logify $dir sudo -nE $SEOD deploy &&
	logify $dir sudo -nE $SEOD triplestore
    )
}

FAILS=()
set +o errexit # <- we want to manage failure more finely than this here

for dir in oxford newbridge mersey-green deep-adaptation dotcoop covid-mutual-aid mutual-aid; do
    echo "PROCESSING $dir..."

    
    if process $dir; then
        echo "SUCCEEDED $dir"
    else
	echo "FAILED $dir (return code $?)"
	FAILS+=($dir)
    fi
done

echo "FINISHING with ${#FAILS[@]} failed: ${FAILS[@]}"
exit ${#FAILS[@]}
