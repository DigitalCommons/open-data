#!/bin/bash

set -o pipefail
set -o errexit

SCRIPT=${BASH_SOURCE[0]}
REPO_DIR=$(readlink -f ${SCRIPT%/*}/../..)
SEOD='bundle exec seod'

# Gems are only cached here if this exists, so make it
mkdir -p $REPO_DIR/caches/gems

# Reformat the output of a command to make it easier to follow in logs
function logify() {
    local dir=$1
    shift
    printf "\n[For $dir: $*]\n"
    # Prefix STDOUT with space, but STDERR with an exclamation too
    # Piping to cat makes this function wait for the process substitutions before returning
    "$@" > >(sed -e 's/^/  /') 2> >(sed -e 's/^/  ! /') | cat
}

# Check if seod supports a command, given as the first parameter
#
# Somewhat hacky - greps the help output. However, this needs to support
# older versions of seod, and we can't back-patch something nicer.
function can() {
    ( $SEOD 2>&1 || true ) | grep -qE "^- $1\$"
}

# Process one directory (passed as first argument)
#
# This should return a non-zero code if any part fails but the other
# dirs should still be processed (or possibly exit, in the extreme
# case when all processing should stop)
function process {
    local dir="${1:?directory argument required}"
    (
        cd $REPO_DIR/$dir &&
        logify $dir bundle install --quiet &&
        logify $dir $SEOD download &&
        logify $dir $SEOD convert &&
        ( if can generate; then logify $dir $SEOD generate ; fi ) &&
        logify $dir sudo -nE $SEOD deploy &&
        ( if can triplestore; then logify $dir sudo -nE $SEOD triplestore; fi ) &&
        ( if can post_success; then logify $dir $SEOD post_success; fi )
    )
}

FAILS=()
set +o errexit # <- we want to manage failure more finely than this here

for dir in ica owned-by-oxford newbridge mersey-green deep-adaptation covid-mutual-aid workers-coop; do
    echo "PROCESSING $dir..."
    
    process $dir
    case "$?" in
        0)
            echo "SUCCEEDED $dir"
            ;;
        100)
            echo "NO CHANGES $dir (return code $?)"
            ;;
        *)
            echo "FAILED $dir (return code $?)"
            FAILS+=($dir)
            ;;
    esac
done

echo "FINISHING with ${#FAILS[@]} failed: ${FAILS[@]}"
exit ${#FAILS[@]}
