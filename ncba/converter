#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
#
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data'
require 'se_open_data/config'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schema/types'
require 'se_open_data/csv/converter/limesurveycore'
require 'normalize_country'
require 'csv'

class CsvLookup
  def initialize(dict = {}, default: nil)
    @index = dict
    @default = default
  end

  def get(key)
    if key == nil || key == ''
      return @default
    end
    nkey = @norm_key.call(key) if @norm_key
    unless @index.has_key? nkey
      raise "no match for key '#{key}' (normalised: '#{nkey}'). #{@index.inspect}"
    end
    @index.fetch(nkey)
  end

  def key(&block)
    @norm_key = block
    self
  end

  def val(&block)
    @norm_val = block
    self
  end
  
  # Loads a CSV mapping file.
  #
  # A yield block can be used to transform the key and value entries.
  # The block receives key and val parameters, and
  # should return a new pair of values.
  #
  # Duplicate keys will raise an exception.
  #
  # The from: and to: named paramters can be used to name the columns
  # to map. These default to mapping the first field to the second field
  #
  # Returns the object itself, to allow chaining.
  def load_csv(file, from: 0, to: 1, &block)
    @index = {}
    CSV.foreach(file, headers: true) do |row|
      key = nkey = row[from]
      val = nval = row[to]
      if val != nil and val != ''
        nkey = @norm_key.call(key) if @norm_key
        nval = @norm_val.call(val) if @norm_val
        @index[nkey] = nval
      end
      if @index[key]
        abort "Duplicate from #{from} in #{file}: #{key} (originally #{origkey})"
      end
      warn "map: #{key} -> #{val}"
    end
    
    self
  end
  
  alias_method :[], :get
  
end



module Converter
  
  # A convenient alias...
  Types = SeOpenData::CSV::Schema::Types

  # The output schema
  OutSchema = SeOpenData::CSV::Schema.load_file("output.yml")
  
  def self.country(country)
    # Convert "Country/Region" field data - which is the
    # physical location of the organisation - to an ISO 2 letter code.
    # Deals with some special cases.
    #
    # Raises an exception if an invalid case is found.
    case (country.downcase)
    when "timor leste"
      "TL"
    else
        NormalizeCountry(country, to: :alpha2) or
          raise "unrecognised country: #{country}"
    end
  end
  
  # Returns a schema converter for the given schema.
  #
  # This defines a schema mapping data into the standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  def self.mk_converter(from_schema:, to_schema:)
    # Find the config file...
    config = SeOpenData::Config.load
    essglobal = config.ESSGLOBAL_URI
    ac = "#{essglobal}standard/activities-modified/"
    os = "#{essglobal}standard/organisational-structure/"
    
    return SeOpenData::CSV::Schema.converter(
             from_schema: from_schema,
             to_schema: to_schema,
             input_csv_opts: {skip_blanks: true}
             #    output_csv_opts: {quote_empty: false}
           ) do
      | # These parameters match source schema field ids
        record_id:,
        company_name:,
        company_domain:,
        member_year:,
        coop_sector:,
        industry:,
        created:,
        last_activity:,
        city:,
        state_region:,
        country_region:,
        postcode:
        |
        warn [company_name, postcode, country_region].inspect
          {
            id: record_id,
            name: company_name,
            description: nil,
            organisational_structure: nil,
            primary_activity: @@industry_to_activity[industry],
            activities: nil,
            street_address: nil,
            locality: nil,
            region: nil,
            postcode: postcode,
            country_id: country(country_region),
            territory_id: nil,
            homepage: nil,
            phone: nil,
            email: nil,
            twitter: nil,
            facebook: nil,
            companies_house_number: nil,
            qualifiers: nil,
            base_membership_type: nil,
            # these fields depend on the street address
            latitude: nil,
            longitude: nil,
            geocontainer: nil,
            geocontainer_lat: nil,
            geocontainer_lon: nil,
            
            city: city,
            state_region: state_region,
            industry: @@industry_to_id[industry],
            coop_sector: @@sector_to_id[coop_sector],
            domain: company_domain,
          };
      end
  end
         
  # Entry point if invoked as a script.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load

    # This defines the input CSV schema we expect (after clean-up an index generation)
    schema = SeOpenData::CSV::Schema.load_file(config.ORIGINAL_CSV_SCHEMA)
    
    # This defines the output CSV schema
    output_schema = SeOpenData::CSV::Schema.load_file("output.yml")
    
    # original data file
    original_data = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Intermediate csv files
    standard_csv = File.join(config.GEN_CSV_DIR, "standard.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV

    # A converter between the input and standard csv schema
    converter = mk_converter(from_schema: schema, to_schema: OutSchema)

    # Get the Geoapify API key
    pass = SeOpenData::Utils::PasswordStore.new(use_env_vars: config.USE_ENV_PASSWORDS)
    api_key = pass.get config.GEOCODER_API_KEY_PATH

    # Define the field mappings
    @@industry_to_activity = CsvLookup.new
                               .key {|k| k.downcase }
                               .val {|v| config.ESSGLOBAL_URI+'standard/activities-ica/'+v }
                               .load_csv('ncba-industry-to-ica-activity.csv')
    
    @@industry_to_id = CsvLookup.new
                         .key {|k| k.downcase }
                         .val {|v| config.ESSGLOBAL_URI.sub(%r{/essglobal.*},'/ncba/industry/')+v }
                         .load_csv('ncba-industry-term-to-id.csv')
    
    @@sector_to_id = CsvLookup.new
                       .key {|k| k.downcase }
                       .val {|v| config.ESSGLOBAL_URI.sub(%r{/essglobal.*},'/ncba/sector/')+v }
                       .load_csv('ncba-sector-term-to-id.csv',
                                 from: 'NCBA Sector Label', to: 'NCBA Sector ID')
    
    # Convert the csv to the standard schema
    converter.convert File.open(original_data), standard_csv

    SeOpenData::CSV.add_postcode_lat_long(
      infile: standard_csv,
      outfile: output_csv,
      api_key: api_key,
      lat_lng_cache: config.POSTCODE_LAT_LNG_CACHE,
      postcode_global_cache: config.GEODATA_CACHE,
      replace_address: false,
      to_schema: OutSchema,
    )

  rescue => e
    raise "error transforming #{original_data} into #{output_csv}: #{e.message}"
  end

  private


end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0

