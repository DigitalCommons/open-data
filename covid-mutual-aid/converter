#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.

require 'se_open_data'
require 'se_open_data/csv/schema/types'
require 'csv'
require 'json'

# Defines a schema mapping for ica-youth-network data.
#
# The hash {IcaYouthNetworkConverter::InputHeaders} identifies methods
# which should be implemented as simple CSV field look-ups.
#
# Some are named in {SeOpenData::CSV::Standard::V1}'s keys and so will be copied
# verbatim into the output CSV data. These have no underscore prefix.
#
# Those with underscore prefixes are used internally.
#
# The other keys of {SeOpenData::CSV::Standard::V1} must also have methods
# implemented in this class. These are the ones which have more
# complicated transformation rules - they cannot be a simple copy of
# an existing data field.
#
# Input data fields are:
#
# - Organization Type
# - Name
# - name
# - Region
# - Country
# - City
# - Latitude
# - Longitude
# - Size
# - Type
# - Sector
# - Address
# - Description
# - Additional Details
# - Website
# - Email
#
# See discussion here:
# https://github.com/SolidarityEconomyAssociation/open-data/issues/11
class Converter < SeOpenData::CSV::RowReader

  # A convenient alias...
  Types = SeOpenData::CSV::Schema::Types
 
  # @param row [Hash<String => String>] - a row of CSV data
  def initialize(row)
    # Let CSV::RowReader provide methods for accessing columns described by InputHeaders, above:
    super(row, InputHeaders)
  end

  #check each of the websites
  def homepage
    Types.multivalue(_website) do |it|
      Types.normalise_url(it, default: nil)
    end
  end

  def name
    _name || "No Name" # FIXME
  end

  def facebook
    urls = _website.split(SeOpenData::CSV::Standard::V1::SubFieldSeparator)
    return Types.normalise_facebook([link_facebook].chain(urls), base_url: '')
  end
  
  # We don't display organisational_structure at all
  def organisational_structure
    ""
  end

  def postcode
    # Regex adapted from https://stackoverflow.com/a/51885364/2960236
    street_address.upcase.scan(/\b(?:[A-Z]{1,2}\d[A-Z\d]? ?\d[A-Z]{2}|GIR ?0A{2})\b/).last
  end

  # def primary_activity
  # end

  # Transforms the json to a csv file
  #
  # @param input - an input stream, or the name of a file to read
  # @param output - an output stream, or the name of a file to read

  def self.strip_emoji(text)
    text = text.force_encoding('utf-8').encode
    clean = ""

    # symbols & pics
    regex = /[\u{1f300}-\u{1f5ff}]/
    clean = text.gsub regex, ""

    # enclosed chars 
    regex = /[\u{2500}-\u{2BEF}]/ # I changed this to exclude chinese char
    clean = clean.gsub regex, ""

    # emoticons
    regex = /[\u{1f600}-\u{1f64f}]/
    clean = clean.gsub regex, ""

    #dingbats
    regex = /[\u{2702}-\u{27b0}]/
    clean = clean.gsub regex, ""
  end

  def self.convert_to_csv(input:, output:)
    input = File.read(input) unless input.is_a? IO
    output = File.open(output, 'w') unless output.is_a? IO

    output.puts JsonToCsvHeaders.join(",")
    
    j_input = JSON.parse(input);
    j_input.each do |mutual|
      row = []
      JsonHeaders.each do |header|
        temp = ""
        if header == "links"
          row.push mutual[header].map{|url| url["url"]}.join(SeOpenData::CSV::Standard::V1::SubFieldSeparator)
        elsif header == "location_coord"
          row.push mutual[header]["lat"].to_s
          row.push mutual[header]["lng"].to_s
        elsif header == "location_country"
          row.push "#{country_code_to_name mutual[header]}"
        else
          row.push "#{mutual[header]}"
        end
      end
      new_row = row.map{|field| field.gsub("\"","\'") }.map{|field| "\"#{field}\""}
                  .map{|field| strip_emoji field }

      output.puts new_row.join(",")
    end
    
  ensure
    # input.close
    output.close
  end
  
  # Transforms the rows from Co-ops UK schema to our standard
  #
  # @param input - an input stream, or the name of a file to read
  # @param output - an output stream, or the name of a file to read
  def self.convert(input:, output:)
    input = File.open(input) unless input.is_a? IO
    output = File.open(output, 'w') unless output.is_a? IO
    
    # Note the use of #read, convert expects a string so it can remove
    # BOMs. Possibly not required if the csv has already been cleaned
    # up?
    SeOpenData::CSV.convert(
      output, SeOpenData::CSV::Standard::V1::Headers,
      input.read, self, {}
    )
  ensure
    input.close
    output.close
  end

  # Entry point if invoked as a script.
  #
  #
  # Expects a config file in a directory `./settings` relative to this
  # script, called either `default.txt` or `config.txt`. The latter is
  # loaded preferentially, otherwise the former is.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load
    
    # original src csv files 
    csv_to_standard_1 = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)
    
    # Intermediate csv files
    json_to_csv_file = File.join(config.GEN_CSV_DIR, "json-to-csv.csv")

    # Output csv file
    output_csv = config.STANDARD_CSV
    
    #convert to a csv file then to standard
    convert_to_csv input: csv_to_standard_1, output: json_to_csv_file
    convert input: json_to_csv_file, output: output_csv
  end

  def self.country_code_to_name(code)
    country_codes = {
      AF: "Afghanistan",
      AX: "Aland Islands",
      AL: "Albania",
      DZ: "Algeria",
      AS: "American Samoa",
      AD: "Andorra",
      AO: "Angola",
      AI: "Anguilla",
      AQ: "Antarctica",
      AG: "Antigua And Barbuda",
      AR: "Argentina",
      AM: "Armenia",
      AW: "Aruba",
      AU: "Australia",
      AT: "Austria",
      AZ: "Azerbaijan",
      BS: "Bahamas",
      BH: "Bahrain",
      BD: "Bangladesh",
      BB: "Barbados",
      BY: "Belarus",
      BE: "Belgium",
      BZ: "Belize",
      BJ: "Benin",
      BM: "Bermuda",
      BT: "Bhutan",
      BO: "Bolivia",
      BA: "Bosnia And Herzegovina",
      BW: "Botswana",
      BV: "Bouvet Island",
      BR: "Brazil",
      IO: "British Indian Ocean Territory",
      BN: "Brunei Darussalam",
      BG: "Bulgaria",
      BF: "Burkina Faso",
      BI: "Burundi",
      KH: "Cambodia",
      CM: "Cameroon",
      CA: "Canada",
      CV: "Cape Verde",
      KY: "Cayman Islands",
      CF: "Central African Republic",
      TD: "Chad",
      CL: "Chile",
      CN: "China",
      CX: "Christmas Island",
      CC: "Cocos (Keeling) Islands",
      CO: "Colombia",
      KM: "Comoros",
      CG: "Congo",
      CD: "Congo, Democratic Republic",
      CK: "Cook Islands",
      CR: "Costa Rica",
      CI: "Cote D'Ivoire",
      HR: "Croatia",
      CU: "Cuba",
      CY: "Cyprus",
      CZ: "Czech Republic",
      DK: "Denmark",
      DJ: "Djibouti",
      DM: "Dominica",
      DO: "Dominican Republic",
      EC: "Ecuador",
      EG: "Egypt",
      SV: "El Salvador",
      GQ: "Equatorial Guinea",
      ER: "Eritrea",
      EE: "Estonia",
      ET: "Ethiopia",
      FK: "Falkland Islands (Malvinas)",
      FO: "Faroe Islands",
      FJ: "Fiji",
      FI: "Finland",
      FR: "France",
      GF: "French Guiana",
      PF: "French Polynesia",
      TF: "French Southern Territories",
      GA: "Gabon",
      GM: "Gambia",
      GE: "Georgia",
      DE: "Germany",
      GH: "Ghana",
      GI: "Gibraltar",
      GR: "Greece",
      GL: "Greenland",
      GD: "Grenada",
      GP: "Guadeloupe",
      GU: "Guam",
      GT: "Guatemala",
      GG: "Guernsey",
      GN: "Guinea",
      GW: "Guinea-Bissau",
      GY: "Guyana",
      HT: "Haiti",
      HM: "Heard Island & Mcdonald Islands",
      VA: "Holy See (Vatican City State)",
      HN: "Honduras",
      HK: "Hong Kong",
      HU: "Hungary",
      IS: "Iceland",
      IN: "India",
      ID: "Indonesia",
      IR: "Iran, Islamic Republic Of",
      IQ: "Iraq",
      IE: "Ireland",
      IM: "Isle Of Man",
      IL: "Israel",
      IT: "Italy",
      JM: "Jamaica",
      JP: "Japan",
      JE: "Jersey",
      JO: "Jordan",
      KZ: "Kazakhstan",
      KE: "Kenya",
      KI: "Kiribati",
      KR: "Korea",
      KW: "Kuwait",
      KG: "Kyrgyzstan",
      LA: "Lao People's Democratic Republic",
      LV: "Latvia",
      LB: "Lebanon",
      LS: "Lesotho",
      LR: "Liberia",
      LY: "Libyan Arab Jamahiriya",
      LI: "Liechtenstein",
      LT: "Lithuania",
      LU: "Luxembourg",
      MO: "Macao",
      MK: "Macedonia",
      MG: "Madagascar",
      MW: "Malawi",
      MY: "Malaysia",
      MV: "Maldives",
      ML: "Mali",
      MT: "Malta",
      MH: "Marshall Islands",
      MQ: "Martinique",
      MR: "Mauritania",
      MU: "Mauritius",
      YT: "Mayotte",
      MX: "Mexico",
      FM: "Micronesia, Federated States Of",
      MD: "Moldova",
      MC: "Monaco",
      MN: "Mongolia",
      ME: "Montenegro",
      MS: "Montserrat",
      MA: "Morocco",
      MZ: "Mozambique",
      MM: "Myanmar",
      NA: "Namibia",
      NR: "Nauru",
      NP: "Nepal",
      NL: "Netherlands",
      AN: "Netherlands Antilles",
      NC: "New Caledonia",
      NZ: "New Zealand",
      NI: "Nicaragua",
      NE: "Niger",
      NG: "Nigeria",
      NU: "Niue",
      NF: "Norfolk Island",
      MP: "Northern Mariana Islands",
      NO: "Norway",
      OM: "Oman",
      PK: "Pakistan",
      PW: "Palau",
      PS: "Palestinian Territory, Occupied",
      PA: "Panama",
      PG: "Papua New Guinea",
      PY: "Paraguay",
      PE: "Peru",
      PH: "Philippines",
      PN: "Pitcairn",
      PL: "Poland",
      PT: "Portugal",
      PR: "Puerto Rico",
      QA: "Qatar",
      RE: "Reunion",
      RO: "Romania",
      RU: "Russian Federation",
      RW: "Rwanda",
      BL: "Saint Barthelemy",
      SH: "Saint Helena",
      KN: "Saint Kitts And Nevis",
      LC: "Saint Lucia",
      MF: "Saint Martin",
      PM: "Saint Pierre And Miquelon",
      VC: "Saint Vincent And Grenadines",
      WS: "Samoa",
      SM: "San Marino",
      ST: "Sao Tome And Principe",
      SA: "Saudi Arabia",
      SN: "Senegal",
      RS: "Serbia",
      SC: "Seychelles",
      SL: "Sierra Leone",
      SG: "Singapore",
      SK: "Slovakia",
      SI: "Slovenia",
      SB: "Solomon Islands",
      SO: "Somalia",
      ZA: "South Africa",
      GS: "South Georgia And Sandwich Isl.",
      ES: "Spain",
      LK: "Sri Lanka",
      SD: "Sudan",
      SR: "Suriname",
      SJ: "Svalbard And Jan Mayen",
      SZ: "Swaziland",
      SE: "Sweden",
      CH: "Switzerland",
      SY: "Syrian Arab Republic",
      TW: "Taiwan",
      TJ: "Tajikistan",
      TZ: "Tanzania",
      TH: "Thailand",
      TL: "Timor-Leste",
      TG: "Togo",
      TK: "Tokelau",
      TO: "Tonga",
      TT: "Trinidad And Tobago",
      TN: "Tunisia",
      TR: "Turkey",
      TM: "Turkmenistan",
      TC: "Turks And Caicos Islands",
      TV: "Tuvalu",
      UG: "Uganda",
      UA: "Ukraine",
      AE: "United Arab Emirates",
      GB: "United Kingdom",
      US: "United States",
      UM: "United States Outlying Islands",
      UY: "Uruguay",
      UZ: "Uzbekistan",
      VU: "Vanuatu",
      VE: "Venezuela",
      VN: "Viet Nam",
      VG: "Virgin Islands, British",
      VI: "Virgin Islands, U.S.",
      WF: "Wallis And Futuna",
      EH: "Western Sahara",
      YE: "Yemen",
      ZM: "Zambia",
      ZW: "Zimbabwe"
    }
    country_codes[:"#{code}"]
  end

  private

  # These define methods (as keys) to implement as simple hash
  # look-ups using CSV field names (values).
  #
  InputHeaders = {
    id: "id",
    country_name: "location_country",
    street_address: "location_name",
    link_facebook: "link_facebook",
    latitude: "lat",
    longitude: "lng",
    _name: "name",
    _website: "links",
  }

  JsonHeaders = ["links","location_name","link_facebook","source","id","name","location_country","location_coord"]
  JsonToCsvHeaders = ["links","location_name","link_facebook","source","id","name","location_country","lat","lng"]
  # MISSING!
  # primary_activity (name?)
  # activities
  # region (region?) 
  # postcode
  # phone
  # twitter
  # facebook
  # companies_house_number
  # geocontainer
  # geocontainer_lat
  # geocontainer_lon
  
end


# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0

