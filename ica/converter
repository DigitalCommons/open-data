#!/usr/bin/env ruby
# coding: utf-8
#
# This script controls a pipeline of processes that convert the original
# CSV data into the se_open_data standard, one step at a time.
# We aim to put only logic specific to this project in this file, and
# keep it brief and clear. Shared logic should go into the {SeOpenData}
# library.
#
# This script can be invoked directly, or as part of the {SeOpenData}
# library's command-line API {SeOpenData::Cli}. For example, this
# just runs the conversion step (or specifically: a script in the
# current directory called `converter`):
#
#     seod convert 
#
# And this runs the complete chain of commands generating and
# deploying the linked data for this project, as configured by
# `settings/config.txt`:
#
#     seod run-all
#
# See the documentation on [`seod`]({SeOpenData::Cli}) for more
# information.

require 'se_open_data/utils/password_store'
require 'se_open_data/config'
require 'se_open_data/csv/schema'
require 'se_open_data/csv/schemas'
require 'se_open_data/csv/schema/types'
require 'se_open_data/csv/standard'
require 'normalize_country'

class Converter

  # The output schema
  OutSchema = SeOpenData::CSV::Schema.load_file("output.yml")

  def self.normalise_country(country, id)
    # Special-case HACKS for ICA data.  We happen to know these cases
    # need their country code supplied
    case id
    when "155"
      "TH"
    when "731"
      "BE"
    when "1856"
      "KN"
    when "3516"
      "KE"
    when "38222"
      "US"
    else
      NormalizeCountry(country, to: :alpha2) or
        raise "unrecognised country: "+country
    end
  end
  
  def self.country(country)
    # Convert ICA "Country-address" field data - which is the
    # physical location of the organisation - to an ISO 2 letter code.
    # Deals with some special cases.
    #
    # Raises an exception if an invalid case is found.
    case country.downcase
    when "côte d’ivoire"
      "CI"
    when "palestine, state of"
      "PS"
    when "türkiye"
      "TR"
    else
      NormalizeCountry(country, to: :alpha2) or
        raise "unrecognised country: #{country}"
    end
  end
  
  def self.territory(country_code)
    # Deal with ICA "Country code" field data - which means territory
    # in our terms.  Assumed to be a 2-letter ISO country code, but
    # also handles a blank value (meaning "International", returned as
    # "I").
    #
    # When a country is supplied, we infer the region and super-region
    # downstream from here. The ICA don't currently use regions or
    # super-regions as territories, and we simply vaildate the Region
    # and Super-region fields.
    #
    # Raises an exception if an invalid case is found.
    case country_code.to_s
    when ""
      "I"
    else
      country_code
    end
  end
       
  # Returns a schema converter for the given schema.
  #
  # This defines the schema mapping for ICA data into the
  # standard schema.
  #
  # The logic that maps the input field data is defined in the
  # do-block. It will be wrapped in a loop which reads the input file
  # and writes the output file. See the documentation for
  # {SeOpenData::CSV::Schema.converter}.
  #
  def self.mk_converter(from_schema:, to_schema:, config:, geocode: )
      # A convenient alias...
    types = SeOpenData::CSV::Schema::Types
    ess = config.ESSGLOBAL_URI + 'standard/'

    return SeOpenData::CSV::Schema.converter(
      from_schema: from_schema,
      to_schema: to_schema,
      input_csv_opts: {skip_blanks: true}
      #    output_csv_opts: {quote_empty: false}
    ) do | # These parameters match source schema field ids
           id:,
           name:,
           country:,
           super_region:,
           region:,
           main_address_street:,
           main_address_supplemental_1:,
           main_address_supplemental_2:,
           main_address_city:,
           main_address_postcode:,
           main_address_latitude:,
           main_address_longitude:,
           main_address_country:,
           website:,
           typology:,
           structure_type:,
           primary_activity:,
           secondary_activities:,
           description:,
           country_code:
           |
           # A mapping to the target schema field ids

           addr =
           [
             main_address_supplemental_1,
             main_address_supplemental_2,
             main_address_city,
             main_address_postcode,
             main_address_country,
           ].compact
             .select {|it| it != nil and it =~ /\S/ }
             .join(", ")
           geocoded = geocode.call(addr)
           
           {
             id: id.to_i,
             name: name || "No Name",
             description: description,
             organisational_structure: type_to_org_struct(structure_type, ess+OS),
             primary_activity: economic_activity_to_activity(primary_activity, ess+ACI),
             activities: (
               secondary_activities
                 .to_s
                 .split(",")
                 .map {|a| economic_activity_to_activity(a.strip, ess+ACI) }
                 .compact
                 .join(SeOpenData::CSV::Standard::V1::SubFieldSeparator)
             ),
             street_address: (
               [main_address_street,
                main_address_supplemental_1,
                main_address_supplemental_2]
                 .collect { |el| el.to_s }
                 .keep_if { |el| el =~ /\S/ }
                 .join(" ")
                 .strip
             ),
             locality: main_address_city,
             region: nil,
             postcode: main_address_postcode,
             # Get the country_id from the main_address_country (meaning physical location) field
             country_id: country(main_address_country),
             # Get the territory_id from the country_code (meaning territory) field
             territory_id: territory(country_code),
             homepage: types.normalise_url(website, default: nil),
             phone: nil,
             email: nil,
             twitter: nil,
             facebook: nil,
             companies_house_number: nil,
             qualifiers: (
               structure_type == "Coop Promoter/Supporter"? ess+QF+"q09" : 
                 secondary_activities.to_s.include?("Coop Promoter/Supporter")?
                   ess+QF+"q90" : nil
             ),
             base_membership_type: base_membership_type(typology, ess+BMT),
             latitude: types.normalise_float(main_address_latitude, default: nil),
             longitude: types.normalise_float(main_address_longitude, default: nil),
             geocontainer: geocoded&.osm_uri,
             geocontainer_lat: geocoded&.lat,
             geocontainer_lon: geocoded&.lng,
             geocontainer_confidence: geocoded&.confidence,
             geocoded_addr: addr,
           }
    end
  end

           
  # Entry point if invoked as a script.
  #
  #
  # Expects a config file in a directory `./settings` relative to this
  # script, called either `default.txt` or `config.txt`. The latter is
  # loaded preferentially, otherwise the former is.
  #
  # See {SeOpenData::Config} for information about this file. It
  # defines the locations of various resources, and sets options on
  # the conversion process.
  def self.main
    # Find the config file...
    config = SeOpenData::Config.load

    # original src csv files
    original_csv = File.join(config.SRC_CSV_DIR, config.ORIGINAL_CSV)

    # Output csv file
    output_csv = config.STANDARD_CSV
    generated_reports_folder = File.join(config.TOP_OUTPUT_DIR, "reports")

    # Get the Geoapify API key
    pass = SeOpenData::Utils::PasswordStore.new(use_env_vars: config.USE_ENV_PASSWORDS)
    api_key = pass.get config.GEOCODER_API_KEY_PATH

    # This defines the input CSV schema we expect (after clean-up and geolocation)
    schema = SeOpenData::CSV::Schema.load_file(config.ORIGINAL_CSV_SCHEMA)    
    
    cache = SeOpenData::Utils::FileCache.new.load(config.GEODATA_CACHE)
    geocode = SeOpenData::Geocoding.new.build(
      lookup: :geoapify,
      api_key: api_key,
      cache: cache,
    )
    
    # A converter between the two
    converter = mk_converter(from_schema: schema, to_schema: OutSchema, config: config,
                             geocode: geocode)
    
    # Transforms to our standard CSV schema.
    converter.json_convert(original_csv, ['values'], output_csv)
    
  end

  private

  ACI = "activities-ica/"
  BMT = "base-membership-type/"
  OS = "organisational-structure/"
  QF = "qualifiers/"
  #​​  COUN = "countries-iso/"
  #  REG = "regions-ica/"
  #  SREG = "super-regions-ica/"
  
  # See https://github.com/SolidarityEconomyAssociation/open-data/issues/11#issuecomment-606719676
  # And: https://vocabs.solidarityeconomy.coop/essglobal/V2a/html-content/essglobal.html#H6.1
  # maps structure type to (map typology to essOrganisationalStructure) or essOrganisationalStructure
  #     "Structure Type" => {"Typology" => "Ess Global Organisational Structure"},
  #     "Structure Type" => "Ess Global Organisational Structure"
  # any is the default case for typology
  def self.type_to_org_struct(type, base)
    return nil if type == nil or type == ""
    base+case(type)
         when "Coop Promoter/Supporter" then "OS50"
         when "Cooperative" then "OS115"
         when "Mutual organisation" then "OS170"
         when "National apex" then "OS180"
         when "National sectoral federation or union" then "OS190"
         when "Regional, state or provincial level federation or union" then "OS200"
         when "Supranational" then "OS230"
         when "Cooperative Group" then "OS210"
         when "Government" then "OS220"
         when "Cooperative of cooperatives / mutuals" then "OS240"
         else raise "Unknown type #{type}"
         end
  end

   def self.economic_activity_to_activity(activity, base)
     return nil if activity == nil or activity == ""
     base+case(activity)
          when "Education / health / social work" then "ICA270"
          when "All" then "ICA290"
          when "Financial services" then "ICA140"
          when "Fishing" then "ICA50"
          when "Housing" then "ICA210"
          when "Insurance" then "ICA150"
          when "Other services" then "ICA200"
          when "Wholesale and retail trade" then "ICA260"
          when "Agriculture" then "ICA10"
          when "Utilities" then "ICA230"
          when "Industry" then "ICA80"
          else raise "Unknown activity #{activity}"
          end
   end
   
   def self.base_membership_type(bmt, base)
     return nil if bmt == nil or bmt == ""
     base+case(bmt)
          when "Consumer/User coops" then "BMT10"
          when "Others" then "BMT60"
          when "Producer coops" then "BMT20"
          when "Worker coops" then "BMT30"
          when "Multi-stakeholder coops" then "BMT40"
          when "Residents" then "BMT50"
          else raise "Unknown base membership type #{bmt}"
          end
   end

end

# Run the entry point if we're invoked as a script
# This just does the csv conversion.
Converter.main if __FILE__ == $0
